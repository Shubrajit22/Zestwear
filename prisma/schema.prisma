datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String?
  mobile    String?
  image     String?
  isAdmin   Boolean    @default(false)
  addresses Address[]
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  reviews   Review[]

  // üîê OTP-based reset
  otp       String?
  otpExpiry DateTime?

  // NextAuth relations
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id                String       @id @default(cuid())
  userId            String
  status            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  shippingAddress   String
  totalAmount       Float
  paymentStatus     String
  shippingStatus    String
  upiTransactionId  String?      // ‚úÖ NEW for BHIM UPI ref/UTR
  user              User         @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
}

model OrderItem {
  id         String      @id @default(cuid())
  name       String
  quantity   Int
  price      Float
  sizeId     String?
  size       String?
  productId  String
  orderId    String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  order      Order       @relation(fields: [orderId], references: [id])
  sizeOption SizeOption? @relation(fields: [sizeId], references: [id])
}

model Address {
  id      String @id @default(cuid())
  userId  String
  address String
  user    User   @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  productId String
  userId    String
  size      String?
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, productId, size])
}

model ProductCategory {
  id          String              @id @default(cuid())
  name        ProductCategoryEnum @unique
  imageUrl    String
  description String
  order       Int                 @default(0) 
  products    Product[]
}


model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Float
  mrpPrice    Float
  discount    Float
  imageUrl    String
  salesCount  Int              @default(0)
  stockImages StockImage[]
  sizeOptions SizeOption[]
  orderItems  OrderItem[]
  categoryId  String
  category    ProductCategory  @relation(fields: [categoryId], references: [id])
  type        ProductType
  state       String?
  district    String?
  institution String?
  color       String?
  texture     String?
  neckline    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  rating      Float?
  cartItems   CartItem[]
  reviews     Review[]
}

model StockImage {
  id        String  @id @default(cuid())
  imageUrl  String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model SizeOption {
  id         String      @id @default(cuid())
  size       String
  price      Float
  productId  String
  product    Product     @relation(fields: [productId], references: [id])
  orderItems OrderItem[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

enum ProductType {
  HOODIE
  TSHIRT
  UNIFORM
  JERSEY
  SPORTS
  CASUAL
  FORMAL
}

enum ProductCategoryEnum {
  BRAHMAND
  NIRVAY
  PRAKRITI
  JERSEY
  CUSTOMISE
  UNIFORM
  SHOES
}
